// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                String         @id @default(cuid())
  name              String?
  email             String         @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  role              String        @default("USER")
  active            Boolean        @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // NextAuth related fields
  accounts          Account[]
  sessions          Session[]

  // Relations
  teams             TeamMember[]
  projects          ProjectMember[]
  tasks             Task[]
  notifications     Notification[]
  materialBases     MaterialBase[] @relation("MaterialCreatedBy")
  managedTeams      Team[]         @relation("TeamAdmin")
  materialTransactions MaterialTransaction[]
  files             File[]         // 업로드한 파일들
}

// Team model
model Team {
  id          String       @id @default(cuid())
  name        String
  code        String       @unique
  description String?
  isActive    Boolean      @default(true)
  adminId     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  admin       User?        @relation("TeamAdmin", fields: [adminId], references: [id])
  members     TeamMember[]
  projects    ProjectTeam[]
}

// TeamMember model (many-to-many relation between User and Team)
model TeamMember {
  id        String    @id @default(cuid())
  userId    String
  teamId    String
  role      String    @default("MEMBER")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

// Project model
model Project {
  id                  String       @id @default(cuid())
  name                String
  description         String?
  location            String?
  startDate           DateTime
  preInspectionDate   DateTime?
  endDate             DateTime?
  status              String        @default("PLANNING")
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // Relations
  teams               ProjectTeam[]
  members             ProjectMember[]
  tasks               Task[]
  drawings            Drawing[]
  specSheets          SpecSheet[]
  quantitySheets      QuantitySheet[]
  measurementData     MeasurementData[]
  workOrders          WorkOrder[]
  shipmentSchedules   ShipmentSchedule[]
  boms                ProjectBOM[]
  notifications       Notification[]
  materialTransactions MaterialTransaction[]
  files               ProjectFile[]  // 프로젝트 파일들
}

// ProjectTeam model (many-to-many relation between Project and Team)
model ProjectTeam {
  id        String    @id @default(cuid())
  projectId String
  teamId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([projectId, teamId])
}

// ProjectMember model (many-to-many relation between Project and User)
model ProjectMember {
  id        String       @id @default(cuid())
  projectId String
  userId    String
  role      String       @default("MEMBER")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  project   Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

// Task model
model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      String       @default("TODO")
  priority    String       @default("MEDIUM")
  dueDate     DateTime?
  projectId   String
  assigneeId  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?       @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  files       TaskFile[]  // 작업 파일들
}

// Drawing model (for project drawings)
model Drawing {
  id          String    @id @default(cuid())
  name        String
  description String?
  fileUrl     String
  thumbnailUrl String?
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// SpecSheet model (for project specifications)
model SpecSheet {
  id          String    @id @default(cuid())
  productType String
  glassSpec   String?
  frameColor  String?
  location    String?
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// QuantitySheet model (for material quantities)
model QuantitySheet {
  id          String    @id @default(cuid())
  productType String
  designSize  String?
  frameColor  String?
  glassSpec   String?
  quantity    Int
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// MeasurementData model (for field measurements)
model MeasurementData {
  id          String    @id @default(cuid())
  building    String?
  unit        String?
  productType String
  location    String?
  width       Float?
  height      Float?
  direction   String?
  openingWidth Float?
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// WorkOrder model (for production work orders)
model WorkOrder {
  id          String    @id @default(cuid())
  building    String?
  unit        String?
  location    String?
  productType String
  productSize String?
  glassSize   String?
  status      String          @default("PENDING")
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// ShipmentSchedule model (for shipment scheduling)
model ShipmentSchedule {
  id          String    @id @default(cuid())
  startDate   DateTime
  endDate     DateTime
  status      String         @default("SCHEDULED")
  notes       String?
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}



// MaterialBase model (기본 자재 정보)
model MaterialBase {
  id              String    @id @default(cuid())
  code            String    @unique
  name            String
  type            String?   // 자재 종류
  specification   String?   // 규격
  unit            String    // 기본 단위
  unitPrice       Float?    // 기본 단가
  description     String?
  category        String?   // 자재 카테고리
  brand           String?   // 브랜드
  model           String?   // 모델명
  safetyStock     Float     @default(0) // 안전재고
  isActive        Boolean   @default(true)
  createdById     String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  createdBy       User                @relation("MaterialCreatedBy", fields: [createdById], references: [id])
  materials       Material[]          // 파생된 자재들
  suppliers       MaterialSupplier[]  // 거래처 연결
  images          MaterialImage[]     // 기본 이미지
  drawings        MaterialDrawing[]   // 도면
}

// Material model (구체적 자재 인스턴스 - 색상, 사이즈 등 변형)
model Material {
  id              String    @id @default(cuid())
  materialBaseId  String
  colorId         String?
  size            String?   // 사이즈 (길이, 폭 등)
  finishType      String?   // 후처리 종류
  unitPrice       Float?    // 변형별 단가
  description     String?   // 변형별 설명
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  materialBase    MaterialBase        @relation(fields: [materialBaseId], references: [id], onDelete: Cascade)
  color           MaterialColor?      @relation(fields: [colorId], references: [id])
  stocks          MaterialStock[]     // 재고 정보
  transactions    MaterialTransaction[] // 거래 내역
  bomItems        BOMItem[]
  files           MaterialFile[]      // 자재 파일들

  @@unique([materialBaseId, colorId, size, finishType])
}

// Supplier model (거래처)
model Supplier {
  id              String    @id @default(cuid())
  name            String    // 거래처명
  address         String?   // 주소
  contactPerson   String?   // 담당명
  phone           String?   // 전화번호
  email           String?   // 이메일
  fax             String?   // 팩스번호
  type            String    // 자재업체, 가공업체, 운송업체 등
  businessLicense String?   // 사업자등록번호 관리
  description     String?   // 거래처 설명
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  materials       MaterialSupplier[]
  transactions    MaterialTransaction[]
}

// Warehouse model (창고)
model Warehouse {
  id          String    @id @default(cuid())
  code        String    @unique
  name        String
  location    String?   // 위치
  purpose     String?   // 원자재창고, 완제품창고, 임시창고 등
  layoutImage String?   // 창고 배치도 이미지 URL
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  stocks      MaterialStock[]
  transactions MaterialTransaction[]
}

// MaterialColor model (자재 색상)
model MaterialColor {
  id            String    @id @default(cuid())
  code          String    @unique
  name          String
  finishType    String?   // 후처리 종류
  colorImage    String?   // 색상 이미지 URL (레거시, 향후 제거 예정)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  materials     Material[]              // 이 색상을 사용하는 자재들
  files         MaterialColorFile[]     // 색상 관련 파일들
}

// MaterialStock model (자재 재고)
model MaterialStock {
  id            String    @id @default(cuid())
  materialId    String    // Material 인스턴스 참조 (색상, 사이즈 포함)
  warehouseId   String
  currentStock  Float     @default(0)
  safetyStock   Float     @default(0)
  unitPrice     Float?
  lastUpdated   DateTime  @default(now())

  // Relations
  material      Material     @relation(fields: [materialId], references: [id], onDelete: Cascade)
  warehouse     Warehouse    @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([materialId, warehouseId])
}

// MaterialTransaction model (자재 거래 내역)
model MaterialTransaction {
  id            String    @id @default(cuid())
  type          String    // IN(입고), OUT(출고)
  materialId    String    // Material 인스턴스 참조 (색상, 사이즈 포함)
  warehouseId   String
  supplierId    String?   // 입고시만 사용
  quantity      Float
  unitPrice     Float?
  totalPrice    Float?
  projectId     String?   // 출고시 프로젝트 연결
  userId        String
  notes         String?
  transactionDate DateTime @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  material      Material     @relation(fields: [materialId], references: [id], onDelete: Cascade)
  warehouse     Warehouse    @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  supplier      Supplier?    @relation(fields: [supplierId], references: [id])
  project       Project?     @relation(fields: [projectId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
}

// MaterialSupplier model (기본자재-거래처 연결)
model MaterialSupplier {
  id              String        @id @default(cuid())
  materialBaseId  String
  supplierId      String
  orderCode       String?       // 거래처별 주문 코드
  leadTime        Int?          // 리드타임 (일)
  minOrder        Float?        // 최소 주문량
  unitPrice       Float?        // 거래처별 단가
  isPreferred     Boolean       @default(false) // 우선 거래처 여부
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  materialBase    MaterialBase  @relation(fields: [materialBaseId], references: [id], onDelete: Cascade)
  supplier        Supplier      @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([materialBaseId, supplierId])
}

// MaterialDrawing model (기본자재 도면)
model MaterialDrawing {
  id              String        @id @default(cuid())
  materialBaseId  String
  title           String
  fileUrl         String
  version         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  materialBase    MaterialBase  @relation(fields: [materialBaseId], references: [id], onDelete: Cascade)
}

// MaterialImage model (기본자재 이미지)
model MaterialImage {
  id              String        @id @default(cuid())
  url             String
  isDefault       Boolean       @default(false)
  materialBaseId  String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  materialBase    MaterialBase  @relation(fields: [materialBaseId], references: [id], onDelete: Cascade)
}



// BOM model (Bill of Materials)
model BOM {
  id          String    @id @default(cuid())
  productCode String    @unique
  productName String
  productType String
  description String?
  drawingUrl  String?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  items       BOMItem[]
  projects    ProjectBOM[]
  files       BOMFile[]       // BOM 파일들
}

// BOMItem model (items in a BOM)
model BOMItem {
  id          String    @id @default(cuid())
  bomId       String
  materialId  String
  quantity    Float
  sizeFormula String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  bom         BOM       @relation(fields: [bomId], references: [id], onDelete: Cascade)
  material    Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)
}

// ProjectBOM model (BOM instances for specific projects)
model ProjectBOM {
  id          String    @id @default(cuid())
  bomId       String
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  bom         BOM       @relation(fields: [bomId], references: [id], onDelete: Cascade)
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([bomId, projectId])
}

// Notification model
model Notification {
  id          String    @id @default(cuid())
  title       String
  message     String
  isRead      Boolean   @default(false)
  userId      String
  projectId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
}

// File management models
model File {
  id            String        @id @default(cuid())
  originalName  String        // 원본 파일명
  fileName      String        // 저장된 파일명 (UUID 기반)
  filePath      String        // 파일 저장 경로
  url           String        // 접근 URL
  size          Int           // 파일 크기 (bytes)
  mimeType      String        // MIME 타입
  extension     String        // 파일 확장자
  category      String        @default("DOCUMENT") // 파일 카테고리
  description   String?       // 파일 설명
  tags          String?       // 파일 태그 (쉼표로 구분)
  isPublic      Boolean       @default(false) // 공개 여부
  downloadCount Int           @default(0)     // 다운로드 횟수
  
  // 이미지 관련 필드
  width         Int?          // 이미지 너비
  height        Int?          // 이미지 높이
  thumbnailUrl  String?       // 썸네일 URL
  
  // 버전 관리
  version       Int           @default(1)
  parentFileId  String?       // 이전 버전 파일 ID
  isLatest      Boolean       @default(true)
  
  // 메타데이터
  metadata      String?       // 추가 메타데이터 (JSON 문자열)
  
  // 업로드 정보
  uploadedById  String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  uploadedBy    User          @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  parentFile    File?         @relation("FileVersions", fields: [parentFileId], references: [id])
  childFiles    File[]        @relation("FileVersions")
  
  // 연결된 엔티티들
  projectFiles        ProjectFile[]
  materialFiles       MaterialFile[]
  materialColorFiles  MaterialColorFile[]  // 자재색상 파일들
  bomFiles            BOMFile[]
  taskFiles           TaskFile[]
  
  @@index([uploadedById])
  @@index([category])
  @@index([mimeType])
  @@index([isLatest])
}

// 파일 카테고리: DOCUMENT, IMAGE, CAD, DRAWING, SPECIFICATION, MANUAL, CERTIFICATE, OTHER

// 프로젝트-파일 연결 테이블
model ProjectFile {
  id        String    @id @default(cuid())
  projectId String
  fileId    String
  role      String    @default("ATTACHMENT") // 파일 역할
  order     Int       @default(0)          // 정렬 순서
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  file      File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, fileId])
  @@index([projectId])
}

// 자재-파일 연결 테이블
model MaterialFile {
  id         String    @id @default(cuid())
  materialId String
  fileId     String
  role       String    @default("ATTACHMENT")
  order      Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  // Relations
  material   Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)
  file       File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  @@unique([materialId, fileId])
  @@index([materialId])
}

// 자재색상-파일 연결 테이블
model MaterialColorFile {
  id        String        @id @default(cuid())
  colorId   String
  fileId    String
  role      String        @default("COLOR_IMAGE") // COLOR_IMAGE, THUMBNAIL, GALLERY, FINISH_SAMPLE
  order     Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  // Relations
  color     MaterialColor @relation(fields: [colorId], references: [id], onDelete: Cascade)
  file      File          @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  @@unique([colorId, fileId])
  @@index([colorId])
}

// BOM-파일 연결 테이블
model BOMFile {
  id        String    @id @default(cuid())
  bomId     String
  fileId    String
  role      String    @default("ATTACHMENT")
  order     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  bom       BOM       @relation(fields: [bomId], references: [id], onDelete: Cascade)
  file      File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  @@unique([bomId, fileId])
  @@index([bomId])
}

// 작업-파일 연결 테이블
model TaskFile {
  id        String    @id @default(cuid())
  taskId    String
  fileId    String
  role      String    @default("ATTACHMENT")
  order     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  file      File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, fileId])
  @@index([taskId])
}

// 파일 역할: MAIN_IMAGE, THUMBNAIL, GALLERY, DRAWING, SPECIFICATION, MANUAL, CERTIFICATE, ATTACHMENT, REFERENCE

// NextAuth Models
// Account model
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Constants (SQLite에서는 enum을 지원하지 않아 상수로 대체)
// 이 상수들은 TypeScript 파일에서 타입으로 사용될 예정입니다

// User 역할 상수
// - SUPER_ADMIN: 시스템 전체 관리자
// - ADMIN: 관리자
// - MANAGER: 매니저
// - USER: 일반 사용자

// Team 역할 상수
// - ADMIN: 팀 관리자
// - LEADER: 팀 리더
// - MANAGER: 팀 매니저
// - MEMBER: 팀원
// - GUEST: 게스트

// Project 역할 상수
// - OWNER: 프로젝트 소유자
// - MANAGER: 프로젝트 매니저
// - MEMBER: 프로젝트 멤버
// - VIEWER: 읽기 전용 접근자

// Project 상태 상수
// - PLANNING: 계획 중
// - IN_PROGRESS: 진행 중
// - ON_HOLD: 보류 중
// - COMPLETED: 완료됨
// - CANCELLED: 취소됨

// Task 상태 상수
// - TODO: 할 일
// - IN_PROGRESS: 진행 중
// - REVIEW: 검토 중
// - DONE: 완료됨

// Task 우선순위 상수
// - LOW: 낮음
// - MEDIUM: 중간
// - HIGH: 높음
// - URGENT: 긴급

// WorkOrder 상태 상수
// - PENDING: 대기 중
// - IN_PRODUCTION: 제작 중
// - COMPLETED: 완료됨
// - CANCELLED: 취소됨

// Shipment 상태 상수
// - SCHEDULED: 예약됨
// - IN_PREPARATION: 준비 중
// - SHIPPED: 배송 중
// - DELIVERED: 배송 완료

// BOM 타입 상수
// - FINISHED_PRODUCT: 완제품
// - SEMI_FINISHED_PRODUCT: 반제품
